{"version":3,"sources":["ciber.js"],"names":["console","log","base_url","ready","document","sessionStartTimes","sessionTimers","Audio","$","showAlert","message","text","fadeIn","alertSound","currentTime","play","error","e","actualizarContadores","each","ahora","card","Date","diferencia","floor","horas","Math","inicio","id","tiempoTranscurrido","minutos","find","segundos","finalizarSesion","toString","padStart","playAlertSound","pararA","parseInt","val","iniciarSesion","response","success","removeClass","addClass","clearInterval","prop","fail","setTimeout","reload","dateElement","now","clockElement","getElementById","textContent","toLocaleTimeString","toLocaleDateString","addEventListener","click","eliminarMaquina","this","closest","data","maquinaId","parar_a","setInterval","post","nota","mensaje","submit","preventDefault","nombre","location","animateMachineNames","trim","_this","css","updateClockAndDate","title","style","transform"],"mappings":"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","file":"ciber.min.js","sourcesContent":["console.log('Base URL:', base_url);\r\n\r\n$(document).ready(function() {\r\n    var sessionStartTimes = {};\r\n    var sessionTimers = {};\r\n    var alertSound = new Audio(base_url + 'assets/audio/alert_sound.mp3');\r\n\r\n    // Verificar si el audio se carga correctamente\r\n    alertSound.addEventListener('canplaythrough', function() {\r\n        console.log('El sonido se cargó correctamente.');\r\n    });\r\n\r\n    alertSound.addEventListener('error', function(e) {\r\n        console.log('Error al cargar el sonido:', e);\r\n    });\r\n\r\n    console.log('Ruta del sonido:', base_url + 'assets/audio/alert_sound.mp3');\r\n\r\n    function showAlert(message) {\r\n        $('#alert-message').text(message);\r\n        $('#alert-overlay').fadeIn();\r\n    }\r\n\r\n    function playAlertSound() {\r\n        try {\r\n            alertSound.currentTime = 0;\r\n            alertSound.play().then(() => {\r\n                console.log('El sonido se está reproduciendo.');\r\n            }).catch(function(error) {\r\n                console.log('Error al reproducir el audio:', error);\r\n            });\r\n        } catch (e) {\r\n            console.log('Error al intentar reproducir el sonido:', e);\r\n        }\r\n    }\r\n\r\n    // Botón de prueba para reproducir el sonido manualmente\r\n    $('body').append('<button id=\"prueba-sonido\" style=\"position: fixed; bottom: 20px; right: 20px; z-index: 1000;\">Probar Sonido</button>');\r\n    $('#prueba-sonido').click(function() {\r\n        playAlertSound();\r\n    });\r\n\r\n    $('#alert-close').click(function() {\r\n        $('#alert-overlay').fadeOut();\r\n    });\r\n\r\n    function actualizarContadores() {\r\n        $('.card').each(function() {\r\n            var card = $(this);\r\n            var id = card.data('id');\r\n\r\n            if (sessionStartTimes[id]) {\r\n                var ahora = new Date();\r\n                var inicio = sessionStartTimes[id];\r\n                var diferencia = Math.floor((ahora - inicio) / 1000);\r\n\r\n                var horas = Math.floor(diferencia / 3600);\r\n                var minutos = Math.floor((diferencia % 3600) / 60);\r\n                var segundos = diferencia % 60;\r\n\r\n                var tiempoTranscurrido = \r\n                    horas.toString().padStart(2, '0') + ':' +\r\n                    minutos.toString().padStart(2, '0') + ':' +\r\n                    segundos.toString().padStart(2, '0');\r\n\r\n                card.find('.contador').text(tiempoTranscurrido);\r\n\r\n                var pararA = parseInt(card.find('.parar-a').val());\r\n                if (pararA && (minutos >= pararA)) {\r\n                    finalizarSesion(id, card);\r\n                    showAlert('El tiempo ha terminado para la máquina ' + card.find('.card-header h5').text());\r\n                    playAlertSound();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function iniciarSesion(id, card) {\r\n        var ahora = new Date();\r\n        var pararA = card.find('.parar-a').val();\r\n\r\n        $.post(base_url + 'index.php/Ciber/iniciar_sesion', {id: id, parar_a: pararA}, function(response) {\r\n            if (response.success) {\r\n                card.find('.status-indicator').removeClass('status-inactive').addClass('status-active');\r\n                card.find('.estado').text('en uso');\r\n                card.find('.inicio').text(ahora.toLocaleTimeString());\r\n                sessionStartTimes[id] = ahora;\r\n                card.find('.contador').text('00:00:00');\r\n                sessionTimers[id] = setInterval(function() { actualizarContadores(); }, 1000);\r\n                card.find('.iniciar').prop('disabled', true);\r\n                card.find('.finalizar').prop('disabled', false);\r\n            } else {\r\n                showAlert('Error al iniciar sesión.');\r\n            }\r\n        }, 'json').fail(function() {\r\n            showAlert('Error de comunicación con el servidor.');\r\n        });\r\n    }\r\n\r\n    function finalizarSesion(id, card) {\r\n        $.post(base_url + 'index.php/Ciber/finalizar_sesion', {id: id}, function(response) {\r\n            if (response.success) {\r\n                card.find('.status-indicator').removeClass('status-active').addClass('status-inactive');\r\n                card.find('.estado').text('sin usar');\r\n                card.find('.inicio').text('');\r\n                card.find('.contador').text('00:00:00');\r\n                card.find('.nota').val('');\r\n                clearInterval(sessionTimers[id]);\r\n                delete sessionStartTimes[id];\r\n                delete sessionTimers[id];\r\n                card.find('.iniciar').prop('disabled', false);\r\n                card.find('.finalizar').prop('disabled', true);\r\n            } else {\r\n                showAlert('Error al finalizar sesión.');\r\n            }\r\n        }, 'json').fail(function() {\r\n            showAlert('Error de comunicación con el servidor.');\r\n        });\r\n    }\r\n\r\n    function eliminarMaquina(id) {\r\n        if (confirm('¿Está seguro de que desea eliminar esta máquina?')) {\r\n            playAlertSound();\r\n            $.post(base_url + 'index.php/Ciber/eliminar_maquina', {id: id}, function(response) {\r\n                console.log('Respuesta del servidor:', response);\r\n                if (response.success) {\r\n                    showAlert('Máquina eliminada correctamente.');\r\n                    setTimeout(function() {\r\n                        location.reload();\r\n                    }, 1000);\r\n                } else {\r\n                    showAlert('Error al eliminar la máquina.');\r\n                }\r\n            }, 'json').fail(function() {\r\n                showAlert('Error de comunicación con el servidor.');\r\n            });\r\n        }\r\n    }\r\n\r\n    $('.eliminar').click(function() {\r\n        var card = $(this).closest('.card');\r\n        var id = card.data('id');\r\n        eliminarMaquina(id);\r\n    });\r\n\r\n    $('#eliminar-maquina-btn').click(function() {\r\n        var maquinaId = $('#maquina-a-eliminar').val();\r\n    \r\n        if (!maquinaId) {\r\n            showAlert('Por favor, seleccione una máquina para eliminar.');\r\n            return;\r\n        }\r\n\r\n        eliminarMaquina(maquinaId);\r\n    });\r\n\r\n    $('.iniciar').click(function() {\r\n        var card = $(this).closest('.card');\r\n        var id = card.data('id');\r\n        iniciarSesion(id, card);\r\n    });\r\n\r\n    $('.finalizar').click(function() {\r\n        var card = $(this).closest('.card');\r\n        var id = card.data('id');\r\n        finalizarSesion(id, card);\r\n    });\r\n\r\n    $('.enviar-mensaje').click(function() {\r\n        var card = $(this).closest('.card');\r\n        var id = card.data('id');\r\n        var nota = card.find('.nota').val();\r\n        var mensaje = card.find('.mensaje').val();\r\n        \r\n        $.post(base_url + 'index.php/Ciber/actualizar_nota_mensaje', {id: id, nota: nota, mensaje: mensaje}, function(response) {\r\n            if (response.success) {\r\n                showAlert('Mensaje enviado correctamente.');\r\n                card.find('.mensaje').val('');\r\n            } else {\r\n                showAlert('Error al actualizar nota y mensaje.');\r\n            }\r\n        }, 'json').fail(function() {\r\n            showAlert('Error de comunicación con el servidor.');\r\n        });\r\n    });\r\n\r\n    $('#agregar-maquina-form').submit(function(e) {\r\n        e.preventDefault();\r\n        var nombre = $('#nombre-maquina').val();\r\n\r\n        $.post(base_url + 'index.php/Ciber/agregar_maquina', {nombre: nombre}, function(response) {\r\n            if (response.success) {\r\n                showAlert('Máquina agregada correctamente.');\r\n                location.reload();\r\n            } else {\r\n                showAlert('Error al agregar la máquina.');\r\n            }\r\n        }, 'json').fail(function() {\r\n            showAlert('Error de comunicación con el servidor.');\r\n        });\r\n    });\r\n\r\n    $('.card').each(function() {\r\n        var card = $(this);\r\n        if (card.find('.estado').text().trim() === 'en uso') {\r\n            card.find('.iniciar').prop('disabled', true);\r\n            card.find('.finalizar').prop('disabled', false);\r\n            var inicio = new Date(card.find('.inicio').text());\r\n            var id = card.data('id');\r\n            sessionStartTimes[id] = inicio;\r\n            sessionTimers[id] = setInterval(function() { actualizarContadores(); }, 1000);\r\n       \r\n       \r\n            function animateMachineNames() {\r\n                $('.card-header h5').each(function() {\r\n                    $(this).css('transform', 'scale(1.05)');\r\n                    setTimeout(() => {\r\n                        $(this).css('transform', 'scale(1)');\r\n                    }, 500);\r\n                });\r\n            }\r\n            \r\n            // Animar los nombres de las máquinas cada 5 segundos\r\n            setInterval(animateMachineNames, 5000);\r\n            \r\n       \r\n       \r\n        } else {\r\n            card.find('.iniciar').prop('disabled', false);\r\n            card.find('.finalizar').prop('disabled', true);\r\n        }\r\n    });\r\n\r\n    // New code for clock and date\r\n    function updateClockAndDate() {\r\n        const now = new Date();\r\n        const clockElement = document.getElementById('clock');\r\n        const dateElement = document.getElementById('date');\r\n        \r\n        if (clockElement && dateElement) {\r\n            clockElement.textContent = now.toLocaleTimeString();\r\n            dateElement.textContent = now.toLocaleDateString();\r\n        }\r\n    }\r\n\r\n    // Update clock and date every second\r\n    setInterval(updateClockAndDate, 1000);\r\n    \r\n    // Initial call to set the time immediately\r\n    updateClockAndDate();\r\n\r\n    // Animate the title\r\n    function animateTitle() {\r\n        const title = document.getElementById('controlador-title');\r\n        if (title) {\r\n            title.style.transform = 'scale(1.05)';\r\n            setTimeout(() => {\r\n                title.style.transform = 'scale(1)';\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    // Animate title every 5 seconds\r\n    setInterval(animateTitle, 5000);\r\n\r\n    // Iniciar los contadores para las sesiones en curso\r\n    actualizarContadores();\r\n    setInterval(actualizarContadores, 1000);\r\n});\r\n\r\n"]}